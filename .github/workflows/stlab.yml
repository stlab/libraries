name: Build and Tests

on:
  pull_request:
  push:
    branches:
    - main
  

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  generate-matrix:
    name: Generate Job Matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: Generate Job Matrix
        id: set-matrix
        # Note: The json in this variable must be a single line for parsing to succeed.
        run: echo "::set-output name=matrix::$(cat .github/matrix.json | scripts/flatten_json.py)"
          
  builds:
    needs: generate-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10.4"

      - name: Install Dependencies (macos)
        if: ${{ startsWith(matrix.config.os, 'macos') }}
        run: |
          chmod +x .github/install.sh
          .github/install.sh
        shell: bash

      - name: Install Dependencies (ubuntu)
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        run: |
          sudo apt-get install -y ninja-build
          sudo apt-get install -y libboost-all-dev
        shell: bash

      - name: Install Dependencies (Windows)
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        run: |
          set PATH=%PYTHON%;%PYTHON%/Scripts/;%PATH%;
          python.exe --version
          cmake --version
          python.exe -m pip install --upgrade pip
          pip.exe install markupsafe==2.0.1
          pip.exe install conan_package_tools==0.38.0
          pip.exe install conan==1.43.0
          conan --version
          conan user
        shell: cmd

      - name: Settting EnvVars (Linux+GCC)
        if: ${{ matrix.config.compiler == 'gcc' }}
        shell: bash
        run: |
          echo "CC=gcc-${{matrix.config.version}}" >> $GITHUB_ENV
          echo "CXX=g++-${{matrix.config.version}}" >> $GITHUB_ENV

      - name: Settting EnvVars (Linux+Clang)
        if: ${{ matrix.config.compiler == 'clang' }}
        shell: bash
        run: |
          echo "CC=clang-${{matrix.config.version}}" >> $GITHUB_ENV
          echo "CXX=clang++-${{matrix.config.version}}" >> $GITHUB_ENV

      - name: Settting EnvVars (macOS)
        if: ${{ matrix.config.compiler == 'apple-clang' }}
        shell: bash
        run: |
          echo "CONAN_APPLE_CLANG_VERSIONS=${{ matrix.config.version }}" >> $GITHUB_ENV

      - name: Settting EnvVars (Windows)
        if: ${{ matrix.config.compiler == 'Visual Studio' }}
        shell: powershell
        run: |
          echo "CONAN_VISUAL_VERSIONS=${{ matrix.config.version }}" >> $Env:GITHUB_ENV
          echo "CMAKE_TOOLSET=${{ matrix.config.cmake_toolset }}" >> $Env:GITHUB_ENV

      - name: Configure (ubuntu)
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        shell: bash
        run: |
          mkdir build
          cmake -S. -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release

      - name: Build (macos)
        if: ${{ startsWith(matrix.config.os, 'macos') }}
        shell: bash
        run: |
          chmod +x .github/run.sh
          .github/run.sh

      - name: Build (ubuntu)
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        shell: bash
        run: |
          cmake --build build/

      - name: Test (ubuntu)
        if: ${{ startsWith(matrix.config.os, 'ubuntu') }}
        shell: bash
        run: |
          cd build/
          ctest

      - name: Build (Windows)
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        shell: powershell
        run: |
          Write-Host "CONAN_VISUAL_VERSIONS: $Env:CONAN_VISUAL_VERSIONS"
          Write-Host "CMAKE_TOOLSET:         $Env:CMAKE_TOOLSET"
          python build.py
