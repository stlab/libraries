name: Build and Tests

on:
  pull_request:
  push:
    branches:
    - main

jobs:
  generate-matrix:
    name: Generate job matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: Generate job matrix
        id: set-matrix
        # Note: The json in this variable must be a single line for parsing to succeed.
        run: echo "::set-output name=matrix::$(cat .github/matrix.json | scripts/flatten_json.py)"

  builds:
    needs: generate-matrix
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    name: ${{ matrix.config.name }}

    steps:
      - uses: actions/checkout@v2
      - uses: mymindstorm/setup-emsdk@v11
        if: ${{ startsWith(matrix.config.compiler, 'emscripten') }}
      
      - name: Verify emsdk installation (emscripten)
        if: ${{ startsWith(matrix.config.compiler, 'emscripten') }}
        run: |
          which emcc
          emcc -v

      - name: Install dependencies (macos)
        if: ${{ startsWith(matrix.config.os, 'macos') }}
        run: |
          brew install boost
          brew install ninja
        shell: bash

      - name: Install dependencies (ubuntu)
        if: ${{ startsWith(matrix.config.os, 'ubuntu') && !startsWith(matrix.config.compiler, 'emscripten') }}
        run: |
          sudo apt-get install -y ninja-build
          sudo apt-get install -y libboost-all-dev
        shell: bash

      - name: Install dependencies (Windows)
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        run: |
          choco install --yes ninja
          vcpkg install boost-test:x64-windows boost-multiprecision:x64-windows boost-variant:x64-windows
        shell: cmd

      - name: Install dependencies (emscripten ubuntu)
        if: ${{ startsWith(matrix.config.compiler, 'emscripten') }}
        shell: bash
        run: |
          sudo apt-get install -y ninja-build
          sudo apt update -y && sudo apt install firefox -y
          git clone --depth 1 --recurse-submodules https://github.com/boostorg/boost.git ~/boost

      - name: Set enviroment variables (Linux+GCC)
        if: ${{ matrix.config.compiler == 'gcc' }}
        shell: bash
        run: |
          echo "CC=gcc-${{matrix.config.version}}" >> $GITHUB_ENV
          echo "CXX=g++-${{matrix.config.version}}" >> $GITHUB_ENV

      - name: Set enviroment variables (Linux+Clang)
        if: ${{ matrix.config.compiler == 'clang' }}
        shell: bash
        run: |
          echo "CC=clang-${{matrix.config.version}}" >> $GITHUB_ENV
          echo "CXX=clang++-${{matrix.config.version}}" >> $GITHUB_ENV

      - name: Compile Boost (Ubuntu emscripten)
        if: ${{ startsWith(matrix.config.compiler, 'emscripten') }}
        shell: bash
        run: |
          mkdir -p ../build-boost
          emcmake cmake -S ~/boost -B ../build-boost -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=23 \
            -DCMAKE_CXX_FLAGS="-pthread" \
            -DCMAKE_INSTALL_PREFIX=~/boost-release-emscripten-install \
            -DBOOST_EXCLUDE_LIBRARIES="asio;beast;context;coroutine;fiber;log"

          cmake --build ../build-boost
          cmake --install ../build-boost

      - name: Configure (Unix && !emscripten)
        if: ${{ (startsWith(matrix.config.os, 'ubuntu') || startsWith(matrix.config.os, 'macos')) && !startsWith(matrix.config.compiler, 'emscripten') }}
        shell: bash
        run: |
          mkdir ../build
          cmake -S. -B../build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=23

      - name: Configure (Ubuntu emscripten)
        if: ${{ startsWith(matrix.config.compiler, 'emscripten') }}
        shell: bash
        run: |
          mkdir ../build
          emcmake cmake -S. -B../build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_STANDARD=23 \
            -DBOOST_ROOT=~/boost-release-emscripten-install            

      - name: Configure (Windows)
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          mkdir ..\build
          cmake -S. -B../build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_CXX_STANDARD=23

      - name: Build (Unix)
        if: ${{ (startsWith(matrix.config.os, 'ubuntu') || startsWith(matrix.config.os, 'macos')) }}
        shell: bash
        run: |
          cmake --build ../build/

      - name: Build (windows)
        if: ${{ startsWith(matrix.config.os, 'windows') }}
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake --build ../build/

      - name: Test
        if: ${{ !startsWith(matrix.config.compiler, 'emscripten') }}
        shell: bash
        run: |
          cd ../build/
          ctest

      - name: Test (emscripten)
        if: ${{ startsWith(matrix.config.compiler, 'emscripten') }}
        shell: bash
        run: |
          find ../build/stlab/test -name "stlab.test.*.html" -exec \
            emrun --browser_args="--headless" --browser firefox --kill_start --kill_exit {} \;